name: Build and Deploy to IIS

on:
  push:
    branches:
      - main  # Trigger on pushes to main branch

jobs:
  build:
    name: Build and Package Application
    runs-on: self-hosted

    env:
      buildConfiguration: 'Release'
      solution: 'Calculatorapp.sln'
      projectPath: Calculatorapp.csproj
      outputDir: publish
      outputZip: 'WebApp.zip'

    steps:
      # Checkout source code
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.303'

      # Restore NuGet packages
      - name: Restore NuGet packages
        run: dotnet restore ${{ env.solution }}

      - name: Build Application
        run: dotnet build ${{ env.solution }} --configuration ${{ env.buildConfiguration }} --no-restore

      - name: Publish Application
        run: dotnet publish ${{ env.projectPath }} --configuration ${{ env.buildConfiguration }} --output ${{ env.outputDir }}

      - name: Zip Published Output
        run: Compress-Archive -Path "${{ env.outputDir }}\*" -DestinationPath "${{ env.outputZip }}"
        shell: powershell

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: WebApp
          path: ${{ env.outputZip }}

  deploy:
    name: Deploy to IIS
    runs-on: self-hosted  # Your self-hosted Windows IIS runner
    needs: build

    env:
      appName: 'WebCalculator'
      siteName: 'WebCalculator'
      port: 8081
      physicalPath: 'C:\\inetpub\\wwwroot\\WebCalculator'
      backupPath: 'C:\\inetpub\\wwwroot\\Backups'
      packageZip: 'WebApp.zip'

    steps:
      # Download build artifact
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: WebApp

      # Backup existing deployed app
      - name: Backup Existing Deployment
        shell: powershell
        run: |
          if (!(Test-Path "${{ env.backupPath }}")) {
            New-Item -ItemType Directory -Path "${{ env.backupPath }}"
          }

          $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
          $backupDestination = Join-Path "${{ env.backupPath }}" "${{ env.appName }}_$timestamp"

          if (Test-Path "${{ env.physicalPath }}") {
            Copy-Item "${{ env.physicalPath }}" $backupDestination -Recurse -Force
            Write-Output "Backup created at $backupDestination"
          } else {
            Write-Output "No existing deployment found. Skipping backup."
          }

      # Stop IIS site
      - name: Stop IIS Website
        shell: powershell
        run: |
          Import-Module WebAdministration
          if (Get-Website -Name "${{ env.siteName }}") {
            Stop-Website -Name "${{ env.siteName }}"
          }

      # Stop App Pool
      - name: Stop App Pool
        shell: powershell
        run: |
          Import-Module WebAdministration
          if (Test-Path "IIS:\\AppPools\\${{ env.appName }}") {
            Stop-WebAppPool "${{ env.appName }}"
          }

      # Create App Directory if missing
      - name: Ensure Physical Path Exists
        shell: powershell
        run: |
          if (!(Test-Path "${{ env.physicalPath }}")) {
            New-Item -ItemType Directory -Path "${{ env.physicalPath }}"
          }

      # Unzip WebApp package to deployment folder
      - name: Deploy WebApp to IIS
        shell: powershell
        run: |
          Expand-Archive -Path "${{ env.packageZip }}" -DestinationPath "${{ env.physicalPath }}" -Force

      # Start App Pool
      - name: Start App Pool
        shell: powershell
        run: |
          Import-Module WebAdministration
          if (Test-Path "IIS:\\AppPools\\${{ env.appName }}") {
            Start-WebAppPool "${{ env.appName }}"
          }

      # Start IIS Website
      - name: Start IIS Website
        shell: powershell
        run: |
          Import-Module WebAdministration
          if (Get-Website -Name "${{ env.siteName }}") {
            Start-Website -Name "${{ env.siteName }}"
          }
