name: Build and Deploy to IIS

on:
  push:
    branches:
      - main  # Trigger on pushes to main branch

jobs:
  build:
    name: Build and Package Application
    runs-on: self-hosted

    env:
      buildConfiguration: 'Release'
      solution: '**/*.sln'
      outputZip: 'WebApp.zip'

    steps:
      # Checkout source code
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup NuGet
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1

      # Restore NuGet packages
      - name: Restore NuGet packages
        run: nuget restore ${{ env.solution }}

      # Setup MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1

      # Build the solution and create a web deploy package (ZIP)
      - name: Build and Package
        run: |
          msbuild ${{ env.solution }} /p:Configuration=${{ env.buildConfiguration }} `
            /p:DeployOnBuild=true `
            /p:WebPublishMethod=Package `
            /p:PackageAsSingleFile=true `
            /p:DesktopBuildPackageLocation="${{ env.outputZip }}"

      # Upload ZIP artifact to share with deploy job
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: WebApp
          path: ${{ env.outputZip }}

  deploy:
    name: Deploy to IIS
    runs-on: self-hosted  # Your self-hosted Windows IIS runner
    needs: build

    env:
      appName: 'WebCalculator'
      siteName: 'Default Web Site'
      physicalPath: 'C:\\inetpub\\wwwroot\\WebCalculator'
      backupPath: 'C:\\inetpub\\wwwroot\\Backups'
      packageZip: 'WebApp.zip'

    steps:
      # Download build artifact
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: WebApp

      # Backup existing deployed app
      - name: Backup Existing Deployment
        shell: pwsh
        run: |
          if (!(Test-Path "${{ env.backupPath }}")) {
            New-Item -ItemType Directory -Path "${{ env.backupPath }}"
          }

          $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
          $backupDestination = Join-Path "${{ env.backupPath }}" "${{ env.appName }}_$timestamp"

          if (Test-Path "${{ env.physicalPath }}") {
            Copy-Item "${{ env.physicalPath }}" $backupDestination -Recurse -Force
            Write-Output "Backup created at $backupDestination"
          } else {
            Write-Output "No existing deployment found. Skipping backup."
          }

      # Stop IIS site
      - name: Stop IIS Website
        shell: pwsh
        run: |
          Import-Module WebAdministration
          if (Get-Website -Name "${{ env.siteName }}") {
            Stop-Website -Name "${{ env.siteName }}"
          }

      # Stop App Pool
      - name: Stop App Pool
        shell: pwsh
        run: |
          Import-Module WebAdministration
          if (Test-Path "IIS:\\AppPools\\${{ env.appName }}") {
            Stop-WebAppPool "${{ env.appName }}"
          }

      # Create App Directory if missing
      - name: Ensure Physical Path Exists
        shell: pwsh
        run: |
          if (!(Test-Path "${{ env.physicalPath }}")) {
            New-Item -ItemType Directory -Path "${{ env.physicalPath }}"
          }

      # Unzip WebApp package to deployment folder
      - name: Deploy WebApp to IIS
        shell: pwsh
        run: |
          Expand-Archive -Path "${{ env.packageZip }}" -DestinationPath "${{ env.physicalPath }}" -Force

      # Start App Pool
      - name: Start App Pool
        shell: pwsh
        run: |
          Import-Module WebAdministration
          if (Test-Path "IIS:\\AppPools\\${{ env.appName }}") {
            Start-WebAppPool "${{ env.appName }}"
          }

      # Start IIS Website
      - name: Start IIS Website
        shell: pwsh
        run: |
          Import-Module WebAdministration
          if (Get-Website -Name "${{ env.siteName }}") {
            Start-Website -Name "${{ env.siteName }}"
          }
